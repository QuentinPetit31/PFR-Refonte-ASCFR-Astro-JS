---
// Definition de l'interface pour les matchs
interface Match {
  id_rencontre: number;
  placesDisp_rencontre: number;
  placesMax_rencontre: number;
  journee_rencontre?: string;
  title?: string;
  adversaire_rencontre: string;
  date_rencontre?: string;
  date?: string;
  categorie_rencontre?: string;
  category?: string;
  deadlineInscription_rencontre?: string;
  deadline?: string;
  ouvertureDemande_rencontre?: string;
  openingDate?: string;
  statut_rencontre?: string;
}

// Récupération des données depuis l'API
let matchesFromAPI = [];
try {
  const response = await fetch('http://localhost:4321/api/match_pl_a_venir_25_26');
  if (response.ok) {
    matchesFromAPI = await response.json();
  } else {
    console.error('Échec de récupération des matchs depuis l\'API');
  }
} catch (error) {
  console.error('Erreur lors de la requête API:', error);
}

// Utilisation des données de l'API ou repli sur les props si l'API échoue
const { matches = [] } = Astro.props;
const displayMatches: Match[] = matchesFromAPI.length > 0 ? matchesFromAPI : matches;
---

<div>
  <table class="w-full text-white">
    <thead>
      <tr class="bg-blue-900 text-center text-white text-base">
        <th class="px-2 py-3 border border-white">Match</th>
        <th class="px-2 py-3 border border-white">Statut</th>
        <th class="px-2 py-3 border border-white">Ouverture</th>
      </tr>
    </thead>
    <tbody>
      {displayMatches.map((match: Match) => {
        // Calcul du statut en fonction des places disponibles
        const isOpen = match.placesDisp_rencontre < match.placesMax_rencontre;
        const placesAvailable = match.placesMax_rencontre - match.placesDisp_rencontre;
        const matchTitle = match.journee_rencontre ? `J${match.journee_rencontre}. ${match.adversaire_rencontre}` : match.title || match.adversaire_rencontre;
        const matchDate = match.date_rencontre ? new Date(match.date_rencontre).toLocaleDateString('fr-FR') : match.date;
        const matchCategory = match.categorie_rencontre || match.category;
        const deadlineDate = match.deadlineInscription_rencontre ? new Date(match.deadlineInscription_rencontre).toLocaleDateString('fr-FR') : match.deadline;
        const openingDate = match.ouvertureDemande_rencontre ? new Date(match.ouvertureDemande_rencontre).toLocaleDateString('fr-FR') : match.openingDate;
        const status = match.statut_rencontre || (isOpen ? "ouvert" : "fermé");
        const canBook = status === "ouvert" || isOpen;
        const matchId = match.id_rencontre || Math.floor(Math.random() * 1000); // Fallback ID si pas d'ID de BDD
        
        return (
          <tr 
            class={`text-center hover:bg-red-900 transition cursor-pointer ${canBook ? '' : 'cursor-not-allowed'}`} 
            data-match-id={matchId}
            data-match-title={matchTitle}
            data-match-date={matchDate}
            data-match-category={matchCategory}
            data-can-book={canBook}
            onclick={`openBookingModal(this)`}
          >
            <td class="px-2 py-3 border border-white">
              <div>{matchTitle}</div>
              <div>{matchDate}</div>
              <div>Catégorie {matchCategory}</div>
              <div>Deadline {deadlineDate}</div>
            </td>
            <td class="px-2 py-3 border border-white">
              {status === "ouvert" || isOpen ? (
                <span class="bg-green-500 text-white px-2 py-1 rounded block">
                  Ouvert<br />Places dispo {placesAvailable}/{match.placesMax_rencontre || "10"}
                </span>
              ) : (
                <span class="bg-red-700 text-white px-2 py-1 rounded block">
                  Fermé
                </span>
              )}
            </td>
            <td class="px-2 py-3 border border-white">{openingDate}</td>
          </tr>
        );
      })}
    </tbody>
  </table>

  <!-- Modal de réservation-->
  <div id="booking-modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 hidden">
    <div class="bg-gradient-to-b from-red-700 to-red-900 text-white p-6 rounded-lg w-full max-w-md mx-4 relative shadow-xl border border-white">
      <!-- Bouton de fermeture -->
      <button id="close-modal" class="absolute top-2 right-2 text-white text-2xl font-bold">&times;</button>
      
      <!-- Réservation pour la J. contre ...-->
      <h2 id="modal-title" class="text-2xl font-normal text-center overflow-hidden mb-6"></h2>
      
      <div id="modal-match-info" class="mb-6 p-3 bg-[#023474] rounded-lg text-center">
        <!-- Informations du match (remplies via JS) -->
      </div>
      
      <!-- Formulaire de réservation -->
      <form id="booking-form" class="space-y-4" method="POST" action="javascript:void(0);">
        <input type="hidden" id="match-id" name="matchId">
        <input type="hidden" id="adversaire" name="adversaire">
        <input type="hidden" id="journee-id" name="journeeId">
        
        <!-- Champs du formulaire -->
        <div>
          <label for="member-number" class="block mb-1 text-center">Numéro d'adhérent <span class="text-red-300">*</span></label>
          <input type="text" id="member-number" name="memberNumber" class="w-full p-2 rounded bg-white bg-opacity-10 border border-white text-white placeholder-blue-300 focus:placeholder-white" required placeholder="Votre numéro d'adhérent">
        </div>
        
        <div>
          <label for="name" class="block mb-1 text-center">Nom <span class="text-red-300">*</span></label>
          <input type="text" id="name" name="name" class="w-full p-2 rounded bg-white bg-opacity-10 border border-white text-white placeholder-blue-300 focus:placeholder-white" required placeholder="Votre nom">
        </div>
        
        <div>
          <label for="firstname" class="block mb-1 text-center">Prénom <span class="text-red-300">*</span></label>
          <input type="text" id="firstname" name="firstname" class="w-full p-2 rounded bg-white bg-opacity-10 border border-white text-white placeholder-blue-300 focus:placeholder-white" required placeholder="Votre prénom">
        </div>
        
        <div>
          <label for="email" class="block mb-1 text-center">Email <span class="text-red-300">*</span></label>
          <input type="email" id="email" name="email" class="w-full p-2 rounded bg-white bg-opacity-10 border border-white text-white placeholder-blue-300 focus:placeholder-white" required placeholder="votre-email@exemple.com">
        </div>
        
        <div>
          <label for="phone" class="block mb-1 text-center">Téléphone <span class="text-red-300">*</span></label>
          <input type="tel" id="phone" name="phone" class="w-full p-2 rounded bg-white bg-opacity-10 border border-white text-white placeholder-blue-300 focus:placeholder-white" required placeholder="Votre numéro de téléphone (10 chiffres)" pattern="[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{2}" title="Numéro de téléphone au format français (10 chiffres)">
        </div>
        
        <div>
          <label for="message" class="block mb-1 text-center">Message / Remarques</label>
          <textarea id="message" name="message" rows="3" class="w-full p-2 rounded bg-white bg-opacity-10 border border-white text-white placeholder-blue-300 focus:placeholder-white" placeholder="Informations complémentaires pour votre demande"></textarea>
        </div>
        
        <div class="text-center pt-4">
          <button type="submit" class="bg-[#023474] hover:bg-blue-800 text-white font-normal py-2 px-6 rounded-lg transition-colors shadow-lg">Envoyer ma demande</button>
        </div>
      </form>
      
      <!-- Message de succès -->
      <div id="booking-success" class="hidden text-center py-8">
        <svg class="w-16 h-16 text-green-500 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <h3 class="text-xl mt-4">Demande envoyée !</h3>
        <p class="mt-2">Nous avons bien reçu votre demande de réservation. Nous vous contacterons rapidement.</p>
        <button id="close-success" class="mt-6 bg-blue-900 hover:bg-blue-800 text-white font-normal py-2 px-6 rounded-lg transition-colors shadow-lg">Fermer</button>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function openBookingModal(element) {
    // Récupérer les données du match
    const matchId = element.getAttribute('data-match-id');
    const matchTitle = element.getAttribute('data-match-title');
    const matchDate = element.getAttribute('data-match-date');
    const matchCategory = element.getAttribute('data-match-category');
    const canBook = element.getAttribute('data-can-book') === 'true';
    
    // Vérifier si la réservation est possible
    if (!canBook) {
      alert("Les réservations sont fermées pour ce match.");
      return;
    }
    
    // Injecter les informations du match dans le modal
    document.getElementById('modal-title').textContent = `Réservation pour ${matchTitle}`;
    document.getElementById('modal-match-info').innerHTML = `
      <p>${matchTitle}</p>
      <p>${matchDate}</p>
      <p>Catégorie ${matchCategory}</p>
    `;
    document.getElementById('match-id').value = matchId;
    
    // Afficher le modal
    const modal = document.getElementById('booking-modal');
    modal.classList.remove('hidden');
    
    // Empêcher le défilement de la page en arrière-plan
    document.body.style.overflow = 'hidden';
  }
  
  // Fermeture du modal
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('booking-modal');
    const closeButton = document.getElementById('close-modal');
    const bookingForm = document.getElementById('booking-form');
    const bookingSuccess = document.getElementById('booking-success');
    const modalTitle = document.getElementById('modal-title');
    const modalMatchInfo = document.getElementById('modal-match-info');

    function closeModal() {
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
      bookingForm.reset();
      bookingSuccess.classList.add('hidden'); // Cache le message de succès
      bookingForm.classList.remove('hidden'); // Réaffiche le formulaire
    }

    // Fermer avec le bouton X
    closeButton.addEventListener('click', closeModal);

    // Fermer en cliquant en dehors du modal
    modal.addEventListener('click', (event) => {
      if (event.target === modal) {
        closeModal();
      }
    });

    // Traitement du formulaire
    bookingForm.addEventListener('submit', async (event) => {
      event.preventDefault();

      const submitButton = bookingForm.querySelector('button[type="submit"]');
      const originalText = submitButton.textContent;
      submitButton.textContent = 'Envoi en cours...';
      submitButton.disabled = true;

      try {
        // Utiliser FormData pour récupérer automatiquement toutes les données
        const formData = new FormData(bookingForm);
        const data = Object.fromEntries(formData.entries());

        console.log("Données du formulaire:", data);

        const response = await fetch('/api/ajouter-demande', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(data)
        });

        console.log("Statut de la réponse:", response.status);
        const result = await response.json();
        console.log("Réponse:", result);

        if (response.ok && result.success) {
          // Afficher le message de succès
          bookingForm.classList.add('hidden'); // Cache le formulaire
          bookingSuccess.classList.remove('hidden'); // Affiche le message de succès
        } else {
          alert(`Erreur: ${result.message || 'Erreur inconnue'}`);
        }

      } catch (error) {
        console.error("Erreur lors de la soumission:", error);
        alert("Erreur technique: " + error.message);
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = originalText;
      }
    });
  });
</script>
